->          /hmrc-frontend                                       hmrcfrontend.Routes

# microservice specific routes

GET         /assets/*file                                       controllers.Assets.at(path="/public", file)

GET         /unauthorized                                       controllers.SecurityController.unauthorized()

GET         /keep-alive                                         controllers.SecurityController.keepAlive()

GET         /                                                   controllers.IndexController.get()

GET         /manage-reports                                     controllers.ReportingController.displayManageReporting()

GET         /reports/cases                                      controllers.ReportingController.caseReport(caseReport: models.reporting.CaseReport, pagination: models.Pagination ?= models.SearchPagination())
GET         /reports/cases/download                             controllers.ReportingController.downloadCaseReport(summaryReport: models.reporting.CaseReport)
GET         /reports/summary                                    controllers.ReportingController.summaryReport(summaryReport: models.reporting.SummaryReport, pagination: models.Pagination ?= models.SearchPagination())
GET         /reports/summary/download                           controllers.ReportingController.downloadSummaryReport(summaryReport: models.reporting.SummaryReport)
GET         /reports/queue                                      controllers.ReportingController.queueReport(queueReport: models.reporting.QueueReport, pagination: models.Pagination ?= models.SearchPagination())
GET         /reports/queue/download                             controllers.ReportingController.downloadQueueReport(queueReport: models.reporting.QueueReport)
GET         /reports/choose-date                                controllers.ReportingController.showChangeDateFilter(report: models.reporting.Report, pagination: models.Pagination ?= models.SearchPagination())
POST        /reports/choose-date                                controllers.ReportingController.postChangeDateFilter(report: models.reporting.Report, pagination: models.Pagination ?= models.SearchPagination())
GET         /reports/choose-teams                               controllers.ReportingController.showChangeTeamsFilter(report: models.reporting.Report, pagination: models.Pagination ?= models.SearchPagination())
POST        /reports/choose-teams                               controllers.ReportingController.postChangeTeamsFilter(report: models.reporting.Report, pagination: models.Pagination ?= models.SearchPagination())
GET         /reports/:name                                      controllers.ReportingController.getReportByName(name: String)

GET         /cases                                              controllers.Default.redirect(to = controllers.routes.IndexController.get.url)
GET         /cases/:reference                                   avar2.controllers.AvarController.show(reference: String)
GET         /cases/:reference/sample                            controllers.CaseController.sampleDetails(reference: String)

GET         /cases/:reference/release                           controllers.ReleaseCaseController.releaseCase(reference: String)
POST        /cases/:reference/release                           controllers.ReleaseCaseController.releaseCaseToQueue(reference: String)
GET         /cases/:reference/release/confirmation              controllers.ReleaseCaseController.confirmReleaseCase(reference: String)

GET         /cases/:reference/assign                            avar2.controllers.AssignCaseController.show(reference: String)
POST        /cases/:reference/assign                            avar2.controllers.AssignCaseController.assignOrViewCase(reference: String)

GET         /cases/:reference/reassign-case                     controllers.ReassignCaseController.showAvailableQueues(reference: String, origin: String)
POST        /cases/:reference/reassign-case                     controllers.ReassignCaseController.reassignCase(reference: String, origin: String)
GET         /cases/:reference/reassign-case/confirmation        controllers.ReassignCaseController.confirmReassignCase(reference: String, origin: String)

GET         /cases/:reference/refer-reason                      controllers.ReferCaseController.getReferCaseReason(reference: String)
POST        /cases/:reference/refer-reason                      controllers.ReferCaseController.postReferCaseReason(reference: String)
GET         /cases/:reference/refer-email                       controllers.ReferCaseController.getReferCaseEmail(reference: String, fileId: Option[String] ?= None)
GET         /cases/:reference/refer                             controllers.ReferCaseController.referCase(reference: String, fileId: String)
GET         /cases/:reference/refer/confirmation                controllers.ReferCaseController.confirmReferCase(reference: String)

GET         /cases/:reference/reject-reason                     controllers.RejectCaseController.getRejectCaseReason(reference: String)
POST        /cases/:reference/reject-reason                     controllers.RejectCaseController.postRejectCaseReason(reference: String)
GET         /cases/:reference/reject-email                      controllers.RejectCaseController.getRejectCaseEmail(reference: String, fileId: Option[String] ?= None)
GET         /cases/:reference/reject                            controllers.RejectCaseController.rejectCase(reference: String, fileId: String)
GET         /cases/:reference/reject/confirmation               controllers.RejectCaseController.confirmRejectCase(reference: String)

GET         /cases/:reference/suspend-reason                    controllers.SuspendCaseController.getSuspendCaseReason(reference: String)
POST        /cases/:reference/suspend-reason                    controllers.SuspendCaseController.postSuspendCaseReason(reference: String)
GET         /cases/:reference/suspend-email                     controllers.SuspendCaseController.getSuspendCaseEmail(reference: String, fileId: Option[String] ?= None)
GET         /cases/:reference/suspend                           controllers.SuspendCaseController.suspendCase(reference: String, fileId: String)
GET         /cases/:reference/suspend/confirmation              controllers.SuspendCaseController.confirmSuspendCase(reference: String)

GET         /cases/:reference/suppress-reason                   controllers.SuppressCaseController.getSuppressCaseReason(reference: String)
POST        /cases/:reference/suppress-reason                   controllers.SuppressCaseController.postSuppressCaseReason(reference: String)
GET         /cases/:reference/suppress-email                    controllers.SuppressCaseController.getSuppressCaseEmail(reference: String, fileId: Option[String] ?= None)
GET         /cases/:reference/suppress                          controllers.SuppressCaseController.suppressCase(reference: String, fileId: String)
GET         /cases/:reference/suppress/confirmation             controllers.SuppressCaseController.confirmSuppressCase(reference: String)

POST        /cases/:reference/reopen                            controllers.ReopenCaseController.confirmReopenCase(reference: String)

GET         /cases/:reference/complete                          controllers.CompleteCaseController.completeCase(reference: String)
POST        /cases/:reference/complete                          controllers.CompleteCaseController.postCompleteCase(reference: String)
GET         /cases/:reference/complete/confirmation             controllers.CompleteCaseController.confirmCompleteCase(reference: String)

GET         /cases/:reference/ruling                            controllers.CaseController.rulingDetails(reference: String)
GET         /cases/:reference/ruling/edit                       controllers.RulingController.editRulingDetails(reference: String)
GET         /cases/:reference/ruling/edit-validate              controllers.RulingController.validateBeforeComplete(reference: String)
POST        /cases/:reference/ruling                            controllers.RulingController.updateRulingDetails(reference: String)
GET         /cases/:reference/ruling/cancel-reason              controllers.CancelRulingController.getCancelRulingReason(reference: String)
POST        /cases/:reference/ruling/cancel-reason              controllers.CancelRulingController.postCancelRulingReason(reference: String)
GET         /cases/:reference/ruling/cancel-email               controllers.CancelRulingController.getCancelRulingEmail(reference: String, fileId: Option[String] ?= None)
GET         /cases/:reference/ruling/cancel                     controllers.CancelRulingController.cancelRuling(reference: String, fileId: String)
GET         /cases/:reference/ruling/cancel/confirmation        controllers.CancelRulingController.confirmCancelRuling(reference: String)

GET         /cases/:reference/activity                          controllers.CaseController.activityDetails(reference: String)
POST        /cases/:reference/activity                          controllers.CaseController.addNote(reference: String)

GET         /cases/:reference/attachments                       controllers.CaseController.attachmentsDetails(reference: String)

GET         /cases/:reference/keywords                          controllers.CaseController.keywordsDetails(reference: String)
POST        /cases/:reference/keywords                          controllers.CaseController.addKeyword(reference: String)

GET         /cases/:reference/change-case-status                controllers.ChangeCaseStatusController.onPageLoad(reference: String)
POST        /cases/:reference/change-case-status                controllers.ChangeCaseStatusController.onSubmit(reference: String)

GET         /cases/:reference/release-or-suppress-case          controllers.ReleaseOrSuppressCaseController.onPageLoad(reference: String)
POST        /cases/:reference/release-or-suppress-case          controllers.ReleaseOrSuppressCaseController.onSubmit(reference: String)

GET         /cases/:reference/appeal                            controllers.AppealCaseController.appealDetails(reference: String)

GET         /cases/:reference/new-appeal                        controllers.AppealCaseController.chooseType(reference: String)
POST        /cases/:reference/new-appeal                        controllers.AppealCaseController.confirmType(reference: String)

GET         /cases/:reference/new-appeal/:appealType            controllers.AppealCaseController.chooseStatus(reference: String, appealType: String)
POST        /cases/:reference/new-appeal/:appealType            controllers.AppealCaseController.confirmStatus(reference: String, appealType: String)

GET         /cases/:reference/change-appeal/:appealId           controllers.AppealCaseController.changeStatus(reference: String, appealId: String)
POST        /cases/:reference/change-appeal/:appealId           controllers.AppealCaseController.confirmChangeStatus(reference: String, appealId: String)

GET         /cases/:reference/sample/status                     controllers.SampleController.chooseStatus(reference: String, options: Option[String])
POST        /cases/:reference/sample/status                     controllers.SampleController.updateStatus(reference: String, options: Option[String])

GET         /cases/:reference/sample/return-status              controllers.SampleReturnController.chooseStatus(reference: String)
POST        /cases/:reference/sample/return-status              controllers.SampleReturnController.updateStatus(reference: String)

GET         /cases/:reference/sample/sample-send                controllers.SampleWhoSendingController.chooseStatus(reference: String)
POST        /cases/:reference/sample/sample-send                controllers.SampleWhoSendingController.updateStatus(reference: String)

GET         /cases/:reference/extended-use/status               controllers.ExtendedUseCaseController.chooseStatus(reference: String)
POST        /cases/:reference/extended-use/status               controllers.ExtendedUseCaseController.updateStatus(reference: String)

GET         /search                                             controllers.SearchController.search(selectedTab: views.SearchTab.SearchTab ?= views.SearchTab.DETAILS,addToSearch: Option[Boolean] ?= None, reference: Option[String] ?= None, search: models.Search ?= models.Search(), sort: models.Sort ?= models.Sort(), page: Int ?= 1)

GET         /new-liability                                      controllers.CreateLiabilityController.get()
POST        /new-liability                                      controllers.CreateLiabilityController.post()

GET         /new-correspondence                                 controllers.CreateCorrespondenceController.get()
POST        /new-correspondence                                 controllers.CreateCorrespondenceController.post()
GET         /release-correspondence-choice                      controllers.CreateCorrespondenceController.displayQuestion(reference: String)
POST        /release-correspondence-choice                      controllers.CreateCorrespondenceController.postChoice(reference: String)
GET         /new-correspondence-confirm                         controllers.CreateCorrespondenceController.displayConfirmation(reference: String)

GET         /cases/v2/:reference/correspondence/edit-case-details       controllers.CreateCorrespondenceController.editCorrespondence(reference: String)
POST        /cases/v2/:reference/correspondence/edit-case-details       controllers.CreateCorrespondenceController.postCorrespondenceDetails(reference: String)
GET         /cases/v2/:reference/correspondence/edit-trader-details     controllers.CreateCorrespondenceController.editCorrespondenceContact(reference: String)
POST        /cases/v2/:reference/correspondence/edit-trader-details     controllers.CreateCorrespondenceController.postCorrespondenceContact(reference: String)

# Note: Browser links can't send a DELETE so it has to be GET in this case
GET         /cases/:reference/keywords/:keyword                 controllers.CaseController.removeKeyword(reference: String, keyword: String)

GET         /pdf/ruling/:reference                              controllers.PdfDownloadController.getRulingPdf(reference: String)
GET         /pdf/letter/:reference                              controllers.PdfDownloadController.getLetterPdf(reference: String)
GET         /pdf/application/:reference                         controllers.PdfDownloadController.applicationPdf(reference: String)

GET         /attachment/:reference/:id                          controllers.ViewAttachmentController.get(reference: String, id: String)

# v2
GET         /cases/v2/:reference/avar                           avar2.controllers.AvarControllerV2.displayAvar(reference: String, fileId: Option[String] ?= None)

GET         /cases/v2/avar/:reference                          avar2.controllers.AvarController2.show(reference)

GET         /cases/v2/:reference/liability                      avar2.controllers.LiabilityController.displayLiability(reference: String, fileId: Option[String] ?= None)

GET         /cases/v2/:reference/liability/edit-details         avar2.controllers.LiabilityController.editLiabilityDetails(reference: String)
POST        /cases/v2/:reference/liability/edit-details         avar2.controllers.LiabilityController.postLiabilityDetails(reference: String)

GET         /cases/v2/:reference/attachments                    controllers.CaseController.addAttachment(reference: String, fileId: String)
GET         /cases/v2/:reference/attachments/remove             avar2.controllers.AttachmentsController.removeAttachment(reference: String, fileId: String, fileName: String)
POST        /cases/v2/:reference/attachments/remove             avar2.controllers.AttachmentsController.confirmRemoveAttachment(reference: String, fileId: String, fileName: String)

GET         /cases/v2/:reference/correspondence                 avar2.controllers.CorrespondenceController.displayCorrespondence(reference: String, fileId: Option[String] ?= None)
POST        /cases/v2/:reference/correspondence                 controllers.CaseController.addMessage(reference: String)

GET         /cases/v2/:reference/miscellaneous                  avar2.controllers.MiscellaneousController.displayMiscellaneous(reference: String, fileId: Option[String] ?= None)

GET        /cases/cache/:reference/:itemType                    controllers.TabCacheController.get(reference: String, itemType: ApplicationType)
POST       /cases/cache/:reference/:itemType                    controllers.TabCacheController.post(reference: String, itemType: ApplicationType)

GET        /operator-dashboard-classification                   controllers.OperatorDashboardController.onPageLoad


GET        /my-cases                                            avar2.controllers.MyCasesController.displayMyCases(activeSubNav: avar2.models.viewmodels.AvarSubNavigationTab ?= avar2.models.viewmodels.AssignedToMeTab)

GET        /all-open-cases                                      avar2.controllers.AllOpenCasesController.displayAllOpenCases(activeSubNav: avar2.models.viewmodels.AvarSubNavigationTab ?= avar2.models.viewmodels.AVaRTab)

GET         /create-new-miscellaneous                           controllers.CreateMiscellaneousController.get()
POST        /create-new-miscellaneous                           controllers.CreateMiscellaneousController.post()

GET         /team-miscellaneous-choice                          controllers.CreateMiscellaneousController.displayQuestion(reference: String)

GET         /new-miscellaneous-confirm                          controllers.CreateMiscellaneousController.displayConfirmation(reference: String)

GET         /cases/v2/:reference/miscellaneous/edit-case-details       controllers.CreateMiscellaneousController.editMiscDetails(reference: String)
POST        /cases/v2/:reference/miscellaneous/edit-case-details       controllers.CreateMiscellaneousController.postMiscDetails(reference: String)

GET        /users/user/:pid/user-edit-team                       avar2.controllers.ManageUserController.editUserTeamDetails(pid: String)
POST       /users/user/:pid/user-edit-team                       avar2.controllers.ManageUserController.postEditUserTeams(pid: String)
GET        /users/manage-users                                   avar2.controllers.ManageUserController.displayManageUsers()
GET        /users/user/:pid                                      avar2.controllers.ManageUserController.displayUserDetails(pid: String, activeSubNav: models.viewmodels.SubNavigationTab ?= models.viewmodels.ManagerToolsUsersTab)
GET        /users/user-delete/:pid                               avar2.controllers.ManageUserController.deleteUser(pid: String, activeSubNav: models.viewmodels.SubNavigationTab ?= models.viewmodels.ManagerToolsUsersTab)
POST       /users/user-delete/:pid                               avar2.controllers.ManageUserController.confirmRemoveUser(pid: String)
GET        /users/user-delete-done                               avar2.controllers.ManageUserController.doneDeleteUser(userName: String, activeSubNav: models.viewmodels.SubNavigationTab ?= models.viewmodels.ManagerToolsUsersTab)

POST        /users/user/:pid/avar                                avar2.controllers.MoveCasesController.postMoveAVaRCases(pid:String, activeSubNav: models.viewmodels.SubNavigationTab ?= models.viewmodels.ManagerToolsUsersTab)
POST        /users/user/:pid/liability                           avar2.controllers.MoveCasesController.postMoveLiabCases(pid:String, activeSubNav: models.viewmodels.SubNavigationTab ?= models.viewmodels.ManagerToolsUsersTab)
POST        /users/user/:pid/correspondence                      avar2.controllers.MoveCasesController.postMoveCorrCases(pid:String, activeSubNav: models.viewmodels.SubNavigationTab ?= models.viewmodels.ManagerToolsUsersTab)
POST        /users/user/:pid/miscellaneous                       avar2.controllers.MoveCasesController.postMoveMiscCases(pid:String, activeSubNav: models.viewmodels.SubNavigationTab ?= models.viewmodels.ManagerToolsUsersTab)

GET         /users/move/move-cases                               avar2.controllers.MoveCasesController.chooseUserOrTeam(activeSubNav: models.viewmodels.SubNavigationTab ?= models.viewmodels.ManagerToolsUsersTab)
POST        /users/move/move-cases                               avar2.controllers.MoveCasesController.postTeamOrUserChoice(activeSubNav: models.viewmodels.SubNavigationTab ?= models.viewmodels.ManagerToolsUsersTab)

GET         /users/move/move-cases-team                          avar2.controllers.MoveCasesController.chooseTeamToMoveCases(activeSubNav: models.viewmodels.SubNavigationTab ?= models.viewmodels.ManagerToolsUsersTab)
POST        /users/move/move-cases-team                          avar2.controllers.MoveCasesController.postTeamChoice(activeSubNav: models.viewmodels.SubNavigationTab ?= models.viewmodels.ManagerToolsUsersTab)
GET         /users/move/move-cases-done-team                     avar2.controllers.MoveCasesController.casesMovedToTeamDone(activeSubNav: models.viewmodels.SubNavigationTab ?= models.viewmodels.ManagerToolsUsersTab)

GET         /users/move/move-cases-user                          avar2.controllers.MoveCasesController.chooseUserToMoveCases(teamId:Option[String] ?= None, activeSubNav: models.viewmodels.SubNavigationTab ?= models.viewmodels.ManagerToolsUsersTab)
POST        /users/move/move-cases-user                          avar2.controllers.MoveCasesController.postUserChoice(teamId:Option[String] ?= None, activeSubNav: models.viewmodels.SubNavigationTab ?= models.viewmodels.ManagerToolsUsersTab)
GET         /users/move/move-cases-done-user                     avar2.controllers.MoveCasesController.casesMovedToUserDone(activeSubNav: models.viewmodels.SubNavigationTab ?= models.viewmodels.ManagerToolsUsersTab)

GET         /users/move/move-cases-user-choose-team              avar2.controllers.MoveCasesController.chooseUserFromAnotherTeam(activeSubNav: models.viewmodels.SubNavigationTab ?= models.viewmodels.ManagerToolsUsersTab)
POST        /users/move/move-cases-user-choose-team              avar2.controllers.MoveCasesController.postChooseUserFromAnotherTeam(activeSubNav: models.viewmodels.SubNavigationTab ?= models.viewmodels.ManagerToolsUsersTab)

GET         /users/move/move-cases-user-team                     avar2.controllers.MoveCasesController.chooseOneOfUsersTeams(activeSubNav: models.viewmodels.SubNavigationTab ?= models.viewmodels.ManagerToolsUsersTab)
POST        /users/move/move-cases-user-team                     avar2.controllers.MoveCasesController.postChooseOneOfUsersTeams(activeSubNav: models.viewmodels.SubNavigationTab ?= models.viewmodels.ManagerToolsUsersTab)

GET        /keywords/manage-keywords                             avar2.controllers.ManageKeywordsController.displayManageKeywords()
POST       /keywords/manage-keywords                             avar2.controllers.ManageKeywordsController.postDisplayManageKeywords()

GET        /keywords/keyword-create                              avar2.controllers.ManageKeywordsController.newKeyword()
POST       /keywords/keyword-create                              avar2.controllers.ManageKeywordsController.createKeyword()
GET        /keywords/keyword-create-done                         avar2.controllers.ManageKeywordsController.displayConfirmKeyword(saveKeyword: String)
GET        /keywords/keyword-update-done                         avar2.controllers.ManageKeywordsController.displayKeywordChangeConfirmation(keyword: String, approved: Boolean, goodsName: String)

GET        /keywords/keyword-edit                                avar2.controllers.ManageKeywordsController.editApprovedKeywords(keywordName: String)
POST       /keywords/keyword-edit                                avar2.controllers.ManageKeywordsController.postEditApprovedKeywords(keywordName: String)

GET        /keywords/keyword-deleted                             avar2.controllers.ManageKeywordsController.displayConfirmationKeywordDeleted(activeSubNav: models.viewmodels.SubNavigationTab ?= models.viewmodels.ManagerToolsKeywordsTab)
GET        /keywords/keyword-renamed                             avar2.controllers.ManageKeywordsController.displayConfirmationKeywordRenamed(oldKeywordName: String, newKeywordName: String)

GET        /keywords/keyword-:reference                          avar2.controllers.ManageKeywordsController.changeKeywordStatus(keywordName: String, reference: String)
POST       /keywords/keyword-:reference                          avar2.controllers.ManageKeywordsController.approveOrRejectKeyword(keywordName: String, reference: String)
